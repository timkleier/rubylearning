exit
resource
next
resource
exit
scraped_url
resource
exit
Resource.count
exit
Resource.all.destroy
Resource.last
resource
exit
valid_attributes
exit
valid_attributes
exit
valid_attributes
exit
valid_attributes
valid_attribures
exit
json
json.size
json.zie
exit
response.attributes
response.keys
response.body
json
response
exit
json
exit
resource_id
exit
resources
resource_id
resource
exit
resource
continue
json
expect(json).not_to be_empty
continue
json
before { get "/api/v1/resources/#{resource_id}" }
continue
get "/api/v1/resources/2"
Resource.first.id
get "/api/v1/resources/2"
get "/api/v1/resources/1"
get "/api/v1/resources/#{resource_id}"
json['id']
resource_id
continue
resource_id
let(:resource_id) { 100 }
n
continue
json.size
json
continue
n
n 
let!(:resources) { create_list(:resource, 10) }
continue
@resource.save
@resource.valid?
@resource
@resource = Resource.scrape(params[:resource][:url])
continue
@resource.errors
@resource.erros
@resource.valid?
@resource
@resource = Resource.scrape(params[:resource][:url])
continue
@resource.errors
@resource.valid?
@resource
@resource = Resource.scrape(params[:resource][:url])
Resource.scrape(params[:resource][:url])
params
continue
json.size.length
json.size.count
json.size
continue
json.size
json
continue
resource.valid?
resource
continue
params
resource_params
params[:commit] == "Scrape"
continue
resource_params
params[:commit] == "Scrape"
params[:commit]
params
continue
User.create!(email: 'test.man@test.com').
User.create!(email: 'test.man@test.com').valid?
continue
invalid_user.errors
invalid_user.erros
invalid_user.valid?
invalid_user
exit
Resource.last
Resource.last.destroy
Resource.last
Resource.last.destroy
Resource.last
@resource
exit
params[:resource]
params
